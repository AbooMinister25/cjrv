{
    "id": "chatgpt",
    "user": {
        "username": "chatgpt",
        "id": "test",
        "discriminator": "0",
        "avatar": "chatgpt",
        "bot": null,
        "system": null,
        "locale": "chatgpt",
        "verified": null,
        "email": null,
        "flags": 64,
        "premium_type": 0,
        "public_flags": 64,
        "admin": false
    },
    "antispam": {
        "ip_hash": "chatgpt",
        "user_agent_hash": "chatgpt",
        "captcha_pass": false
    },
    "response": {
        "age-range": "chatgpt",
        "timezone-explainer": false,
        "timezone": "chatgpt",
        "python-experience": "chatgpt",
        "git-experience": "chatgpt",
        "team-leader": "chatgpt",
        "code-jam-experience": "chatgpt",
        "qualifier-text": false,
        "qualifier": {
            "value": "from enum import auto, Enum\nimport warnings\n\nclass VariantMode(Enum):\n    NORMAL = auto()\n    UWU = auto()\n    PIGLATIN = auto()\n\nclass Quote:\n    def __init__(self, quote: str, mode: VariantMode):\n        self.quote = quote\n        self.mode = mode\n    \n    def __str__(self) -> str:\n        return self.quote\n    \n    def _create_variant(self) -> str:\n        \"\"\"\n        Transforms the quote to the appropriate variant indicated by `self.mode` and returns the result\n        \"\"\"\n        if self.mode == VariantMode.UWU:\n            return self._uwu_variant()\n        elif self.mode == VariantMode.PIGLATIN:\n            return self._piglatin_variant()\n        else:\n            return self.quote\n    \n    def _uwu_variant(self) -> str:\n        \"\"\"\n        Transforms the quote to uwu variant\n        \"\"\"\n        words = self.quote.split()\n        transformed_words = []\n        for word in words:\n            if word.lower().startswith('u'):\n                transformed_words.append(f'u-{word}')\n            else:\n                transformed_words.append(word.replace('l', 'w').replace('r', 'w'))\n        \n        transformed_quote = ' '.join(transformed_words)\n        if len(transformed_quote) > 50:\n            warnings.warn(\"Quote too long, only partially transformed\")\n            transformed_quote = self.quote.replace('l', 'w').replace('r', 'w')\n        \n        return transformed_quote\n    \n    def _piglatin_variant(self) -> str:\n        \"\"\"\n        Transforms the quote to piglatin variant\n        \"\"\"\n        def piglatinize_word(word: str) -> str:\n            vowels = 'aeiou'\n            if word[0].lower() in vowels:\n                return word.capitalize() + 'way'\n            else:\n                for index, char in enumerate(word):\n                    if char.lower() in vowels:\n                        return word[index:].capitalize() + word[:index].lower() + 'ay'\n                return word.capitalize() + 'ay'\n        \n        words = self.quote.split()\n        transformed_words = []\n        for word in words:\n            transformed_words.append(piglatinize_word(word))\n        \n        transformed_quote = ' '.join(transformed_words)\n        if transformed_quote == self.quote.capitalize():\n            raise ValueError(\"Quote was not modified\")\n        \n        return transformed_quote.capitalize()\n\nclass DuplicateError(Exception):\n    \"\"\"Error raised when there is an attempt to add a duplicate entry to a database\"\"\"\n\nclass Database:\n    quotes: list[\"Quote\"] = []\n\n    @classmethod\n    def get_quotes(cls) -> list[str]:\n        \"Returns current quotes in a list\"\n        return [str(quote) for quote in cls.quotes]\n\n    @classmethod\n    def add_quote(cls, quote: \"Quote\") -> None:\n        \"Adds a quote. Will raise a `DuplicateError` if an error occurs.\"\n        if str(quote) in [str(q) for q in cls.quotes]:\n            raise DuplicateError(\"Quote has already been added previously\")\n        cls.quotes.append(quote)\n\ndef run_command(command: str) -> None:\n    \"\"\"\n    Will be given a command from a user. The command will be parsed and executed appropriately.\n    \n    Current supported commands:\n        - `quote` - creates and adds a new quote\n        - `quote uwu` - uwu-ifys the new quote and then adds it\n        - `quote piglatin` - piglatin-ifys the new quote and then adds it\n        - `quote list` - print a formatted string that lists the current quotes to be displayed in discord flavored markdown\n    \"\"\"\n    parts = command.split()\n    \n    if len(parts) < 2:\n        raise ValueError(\"Invalid command\")\n    \n    base_command = parts[0]\n    sub_command = parts[1] if len(parts) >= 2 else None\n    quote_text = ' '.join(parts[2:]) if len(parts) >= 3 else None\n    \n    if base_command != 'quote':\n        raise ValueError(\"Invalid command\")\n    \n    if sub_command == 'list':\n        quotes = Database.get_quotes()\n        if quotes:\n            print('\\n'.join(f\"- {quote}\" for quote in quotes))\n        else:\n            print(\"No quotes found.\")\n    \n    elif sub_command in ['uwu', 'piglatin']:\n        if not quote_text:\n            raise ValueError(\"Invalid command\")\n        \n        try:\n            if sub_command == 'uwu':\n                quote_obj = Quote(quote_text, VariantMode.UWU)\n            elif sub_command == 'piglatin':\n                quote_obj = Quote(quote_text, VariantMode.PIGLATIN)\n            \n            transformed_quote = quote_obj._create_variant()\n            if len(transformed_quote) > 50:\n                raise ValueError(\"Quote is too long\")\n            \n            Database.add_quote(quote_obj)\n            print(f\"Added quote: {transformed_quote}\")\n        \n        except DuplicateError as e:\n            print(str(e))\n        except ValueError as e:\n            print(str(e))\n    \n    else:\n        if not quote_text or not (quote_text.startswith('\"') and quote_text.endswith('\"')):\n            raise ValueError(\"Invalid command\")\n        \n        quote_text = quote_text[1:-1]\n        \n        try:\n            quote_obj = Quote(quote_text, VariantMode.NORMAL)\n            if len(quote_text) > 50:\n                raise ValueError(\"Quote is too long\")\n            \n            Database.add_quote(quote_obj)\n            print(f\"Added quote: {quote_obj}\")\n        \n        except DuplicateError as e:\n            print(str(e))\n        except ValueError as e:\n            print(str(e))",
            "passed": false,
            "failures": []
        }
    },
    "form_id": "chatgpt",
    "timestamp": "chatgpt"
}
